//对话消息列表路由import React,{Component} from 'react'import {connect} from 'react-redux'import {List,Badge} from 'antd-mobile'const Item = List.Itemconst Brief = Item.Brieffunction getLastChat(chatMsgs,userid){    // 首先需要遍历出来最后的一条数据 成对象形式  {chat_id：lastmsg}    //进行排序 生成一个数组    const lastChatObj = {}    // 1. 创建lastchatObj    chatMsgs.forEach(msg => {        // 对msg进行个体的统计， 接收人必须是我， read是false就计数成1        if(msg.to===userid && !msg.read){            msg.unReadCount = 1        }else{            msg.unReadCount = 0        }        // 先遍历所有的数据进入到lastChatObj中        // 判断有没有上一个 有的话就进行时间判断        const chatId = msg.chat_id        // 获取已经保存的信息        const lastMsg = lastChatObj[chatId]        // 判断 是否已经保存        if(!lastMsg){            lastChatObj[chatId]=msg        } else {            // 同一个人与我聊天的 对象                // lastMsg.unReadCount 是存进来的第一条消息的值 是1（已读） 还是 0 （未读）                //msg.unReadCount 又是这个人发送过来的消息 然后进行判断是已读还是未读 1还是0                // 然后加起来            // 累加的unReadCount = 已经统计的值 + 当前的msg            const unReadCount = lastMsg.unReadCount + msg.unReadCount            console.log("1111+", unReadCount)            // 说明以前存了跟这个人有关的信息  然后进行时间排序 事件最后的进入这个对象中            if(msg.create_time > lastMsg.create_time){                lastChatObj[chatId]=msg            }            // 将unReadCount 保存在最新的lastMsg上  它永远就是最新的            lastChatObj[chatId].unReadCount=unReadCount            console.log("2222+",lastMsg.unReadCount)        }    })    // 2. 将它生成一个数组,生成一个有value值组成的数组    const LastMsgs = Object.values(lastChatObj)    //3. 将数组进行排序    LastMsgs.sort(function (m1, m2) {        //谁的时间最新也就是最大 就排在最前方        return m2.create_time-m1.create_time    })    return LastMsgs}class Message extends Component{    /*    * 需求：    *   需要显示所有与与当前登录用户有关的信息列表、只显示最新的一条消息    *   需要创建每个成一个对象 {chat_id:lastMsg}    *   需要一个数组存储所有的与我有关的列表 [ {}]    * */    render(){        const user = this.props.user        const {chatMsgs,users} = this.props.chat        const lastChat = getLastChat(chatMsgs,user._id)        return(            <List style={{marginTop:50,marginBottom:50}}>                {                    lastChat.map( lastchat => {                        const targetId = lastchat.from === user._id? lastchat.to:lastchat.from                        const targetChat = users[targetId]                    return (                   <Item                            key={lastchat._id}                            extra={<Badge text={lastchat.unReadCount}/>}                            thumb={require(`../../assets/images/${targetChat.header}.png`)}                            arrow='horizontal'                            onClick={()=>this.props.history.push(`/chat/${targetId}`)}                            >                            {lastchat.content}                            <Brief>{targetChat.username}</Brief>                    </Item>)                    }                    )                }            </List>        )    }}export default connect(    //chat {    //  users{},    //  chatMsgs[],    //  mess{}    // }    state=>({user:state.user,chat:state.chat}))(Message)