import React, {Component} from 'react'import {NavBar,List,InputItem,Grid,Icon} from 'antd-mobile'import {connect} from 'react-redux'import QueueAnim from 'rc-queue-anim'import {sendMsgs,readMsg} from '../../redux/actions'const Item = List.Itemclass Chat extends Component{    /*    *  thumb -- 用户头像    * */    state ={        content:'',        isShow:false // 是否显示表情列表    }    // 在第一次render()之前回调    componentWillMount () {        // 初始化表情列表数据        const emojis = ['🤣', '😁', '🤣','😀', '😁', '🤣','😀', '😁', '🤣','😀', '😁', '🤣','😀'            ,'😁', '🤣','😀', '😁', '🤣','😀', '😁', '🤣','😀', '😁', '🤣'            ,'😁', '🤣','😀', '😁', '🤣','😀', '😁', '🤣','😀', '😁', '🤣'            ,'😁', '🤣','😀', '😁', '🤣','😀', '😁', '🤣','😀', '😁', '🤣']        this.emojis = emojis.map(emoji => ({text: emoji}))    }    componentDidMount() {        // 初始显示列表        window.scrollTo(0, document.body.scrollHeight)    }    componentDidUpdate () {        // 更新显示列表        window.scrollTo(0, document.body.scrollHeight)    }    //在退出的时候更新count的数量，在结束的时候获得数量  将显示的数量改变    componentWillUnmount () {        //发送请求更新消息的未读状态 必须是同一个人发给我的消息        const from = this.props.match.params.userid        const to = this.props.user._id        this.props.readMsg(from,to)    }    toggleShow = () => {        const isShow = !this.state.isShow        this.setState({isShow})        if(isShow) {            // 异步手动派发resize事件,解决表情列表显示的bug            setTimeout(() => {                window.dispatchEvent(new Event('resize'))            }, 0)        }    }    handleSend = () =>{        const from = this.props.user._id        console.log(from) //5ae516a03b563549f4f946c3        const to = this.props.match.params.userid        const content = this.state.content.trim()        //发送请求 发送消息 -- 前提必须是content有值        if(content) {            this.props.sendMsgs({from,to,content})        }        this.setState({            content:'',            isShow: false        })    }    render() {        const {user} = this.props        const {users,chatMsgs} = this.props.chat        // 计算当前聊天的chat_id --        const meId = user._id        if(!users[meId]){ //判断如果还没有获取数据 直接不做任何显示 return            return null        }        const targetId = this.props.match.params.userid        console.log(targetId)        const chatId = [meId,targetId].sort().join('_')        //chatMsgs 包含所有人的信息 所以需要过滤，chat_id            // 包含对方发给我 还有我发给对方的但是显示的位置不一样        const msgs = chatMsgs.filter(msg => msg.chat_id === chatId)        //得到目标用户的头像 header图像  目标用户的id知道 目标用户的user那么和header组成一个对象        // 有可能注册的用户没有头像 有的话显示没有的话就显示        // user最初的时候是空对象        const targetHeader = users[targetId].header        const targetIcon = targetHeader ? require(`../../assets/images/${targetHeader}.png`) : null        return(            <div id='chat-page'>                <NavBar                    icon={<Icon type='left'/>}                    className='sticky-header'                    onLeftClick={()=> this.props.history.goBack()}                >{users[targetId].username}</NavBar>                <QueueAnim type='scale' delay={100}>                    {msgs.map(msg => {                        const avatar = require(`../../assets/images/${users[msg.from].header}.png`)                        if (msg.from === user._id) {                            return (                                <Item                                    key={msg._id}                                    thumb={avatar}                                >{msg.content}</Item>                            )                        } else {                            return (                                <Item                                    key={msg._id}                                    extra={<img src={avatar}/>}                                    className='chat-me'                                >{msg.content}</Item>                            )                        }                    })}                </QueueAnim>                {/*<List style={{marginTop:50, marginBottom: 60}}>                    {msgs.map( msg =>{                        if(meId === msg.to){                            return  (<Item                                key={msg._id}                                thumb={targetIcon}                            >                                {msg.content}                            </Item>)                        }else {                            return (<Item                                key={msg._id}                                className='chat-me'                                extra='我'                            >                                {msg.content}                            </Item>)                        }                    })}                </List>*/}                <div className='am-tab-bar'>                    <InputItem                        style={{marginBottom:0}}                        className='Input'                        onFocus={() => this.setState({isShow: false})}                        value={this.state.content}                        placeholder='请输入'                        extra={                            <span>                                <span onClick={this.toggleShow} style={{marginRight:5}}>😊</span>                                 <span onClick={this.handleSend}>发送</span>                            </span>                        }                        onChange={(val) => this.setState({content:val})}                    />                    {this.state.isShow ? (                        <Grid                            data={this.emojis}                            columnNum={8}                            carouselMaxRow={4}                            isCarousel={true}                            onClick={(item) => {                                this.setState({content: this.state.content + item.text})                            }}                        />                    ) : null}                </div>            </div>        )    }}export default connect(    state=>({user:state.user,chat:state.chat}),    {sendMsgs,readMsg})(Chat)