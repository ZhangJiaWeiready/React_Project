/*因为有好几个reducer，所以需要引入conbine 将他们组合在一起*/import {combineReducers} from 'redux'import {    ERROR_MSG,    AUTH_SUCCESS,    RECEIVE_MSG,    RESET_MSG} from "./action-type";import {getRedirectTo} from '../utils/index'/* 管理状态 - 看需要管理什么 code user msg 从后台传回来的数据一般都需要 管理起来    存储user信息        username        password        msg        这三个数据都会从后台返回然后存储状态，都需要在页面中显示* */const initUser = {    username:'', // 用户名    type:'',// 用户类型  jingyin/boss    msg:'', // 错误提示信息    redirectTo: '' // 需要自动重定向的路由路径}// reducer的作用，获取最新的信息通过dispathch传入的action 的数据进行更新//产生user状态的reducer -- 因为多个数据所以定义一个变量初始化状态    // 分发action之后处理 获取的信息更新页面的数据function user(state=initUser,action) {    switch (action.type){        case ERROR_MSG: //成功时data为user            // return action.data            return {...state, msg: action.data} // 先...旧的然后获取新的将旧的覆盖 注意两边用{}处理        case AUTH_SUCCESS: // 失败时data为msg            const {type,header} = action.data            // return action.data            return {...action.data, redirectTo:getRedirectTo(type,header)}        case RESET_MSG:            return {...initUser,msg:action.data}        case RECEIVE_MSG:            //此时action.data的state包含多个 header/_id/username/info/salary.....            return action.data        default:            return state    }}// 将user暴露出去 user return 出来的是一个state的对象 ，state的内容不止是初始化的那些还有传过来的那些export default combineReducers({    user})//管理的状态是一个对象 （user）