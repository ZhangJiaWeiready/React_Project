/* n个action creator*  同步action*  异步action*       登录*       注册** */import {    ERROR_MSG,    AUTH_SUCCESS,    RECEIVE_MSG,    RESET_MSG} from "./action-type";import {    reqRegister,    reqLogin,    reqUpdateUser,    reqUser} from "../api";/*每一个action都对应一个同步action*///授权成功的action  dispatch(action -- type)//  data 为发送请求回来的数据/ 错误信息const authSuccess = (user) => ({type:AUTH_SUCCESS,data:user})const errorMsg = (msg) => ({type:ERROR_MSG,data:msg})const resetMsg = (msg) => ({type:RESET_MSG,data:msg})const receiveMsg = (user) => ({type:RECEIVE_MSG,data:user})//注册异步actionexport const register = (user) => {    /*    * user 传过来有 pwd pwd2 username type 不需要pwd2去后台请求    * */    const {username,password,password2,type} = user    //做表单的前台验证    if(!username){        return errorMsg("请输入用户名")    }else if(password !== password2) {        return errorMsg("两次密码输入不一致")    }    //表单输入合法 返回一个发ajax请求的异步action    //异步必须return 返回一个函数    return async dispatch => {        //发送注册的异步ajax请求 -- 异步的ajax请求        /*reqRegister(user).then(response =>{            return response.data        })*/        // 需要发送过去自己输入的信息        // ！！返回的是一个promise对象            // user 是发送到后台的数据需要自己填写 从输入的dispath的action中穿过来user的值然后传入到ajax的请求中去        const response = await reqRegister({password,username,type})        // 用acync 的方式直接获取response 用await之后 等这个函数调用完毕之后返回 数据        // await 意思是等promise对象结果返回出来 ，前提这个函数必须声明成async函数        const result = response.data        // result  -->  {code：0/1，data:{}/msg:“” }        if(result.code === 0 ){            //成功            //分发同步的action  -- 就需要action - type 了            dispatch(authSuccess(result.data))        }else {            //失败            //分发同步的action            dispatch(errorMsg(result.msg))        }    }}//登录异步actionexport const login = (user) => {    const {password,username} = user    //做表单的前台验证    if(!username){        return errorMsg("请输入用户名")    } else if(!password){        return errorMsg("请输入密码")    }    //异步必须return 返回一个函数    return async dispatch => {        //发送注册的异步ajax请求 -- 异步的ajax请求        /*reqRegister(user).then(response =>{            return response.data        })*/        // 需要发送过去自己输入的信息        // ！！返回的是一个promise对象        const response = await reqLogin(user)        // 用acync 的方式直接获取response 用await之后 等这个函数调用完毕之后返回 数据        // await 意思是等promise对象结果返回出来 ，前提这个函数必须声明成async函数        const result = response.data        // result  -->  {code：0/1，data:{}/msg:“” }        if(result.code ===0 ){            //成功            //分发同步的action  -- 就需要action - type 了            dispatch(authSuccess(result.data))        }else {            //失败            //分发同步的action            dispatch(errorMsg(result.msg))        }    }}// 更新用户异步的actionexport const updateUser = (user) => {    // 传入用户输入的信息 进行ajax请求 到后台 ，然后返回一个新的信息包含一堆数据的    return async dispatch => {        const response  = await reqUpdateUser(user)        const result = response.data        //获取到后台传来的信息之后 分发同步action 更新状态        //返回 三个数据  code msg data        if(result.code === 1) {            // == 1 说明分发重置action            dispatch(resetMsg(result.msg))        }else if(result.code === 0){            dispatch(receiveMsg(result.data))        }    }}// 获取用户异步actionexport const getUser = () =>{    return async  dispatch => {        const response = await reqUser()        const result = response.data        if(result.code === 0) {            dispatch(receiveMsg(result.data))        }else {            dispatch(resetMsg(result.msg))        }    }}